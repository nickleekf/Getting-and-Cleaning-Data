htmlCode[1]
htmlCode[2]
htmlCode[3]
htmlCode[4]
htmlCode[5]
htmlCode[1,1]
mean(iris[iris$Species=="virginica",]$Sepal.Length)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
x
e <- rnorm(10, 0, 20)
e
y <- 0.5 + 2 * x + e
y
plot(y)
rProf()
Rprof()
str(lm)
y=1
y <-1
x1 <- 2
x2 <- 3
fit <- lm(y ~ x1 + x2)
summaryRprof()
system.time()
?system.time
x <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv ")
x <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
x <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" destfile = "x")
fileUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
getwd()
download.file(fileUrl,destfile = "./R/coursera/3. Getting and Cleansing Data/Lesson 3/housing.csv",method = "curl")
download.file(fileUrl,destfile = "./R/coursera/3. Getting and Cleansing Data/Lesson 3/housing.csv",method = "curl")
library(RCurl)
library(bitops)
library(RCurl)
download.file(fileUrl,destfile = "./R/coursera/3. Getting and Cleansing Data/Lesson 3/housing.csv",method = "curl")
x <- getURL(fileUrl)
fileUrl = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile = "./R/coursera/3. Getting and Cleansing Data/Lesson 3/housing.csv",method = "curl")
install.packages("RCurl")
install.packages("RCurl")
library(RCurl)
library(bitops)
library(RCurl)
x <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(x, destfile = "asd.csv",method = "curl")
housing <- read.csv("R/coursera/3. Getting and Cleansing Data/Lesson 3/getdata-data-ss06hid.csv")
summary(housing)
agricultureLogical <- housing[housing$ACR=="3" & housing$AGS=="6",]
which(agricultureLogical)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
file <- file.path(getwd(), "ss06hid.csv")
download.file(url, file, method = "curl")
dt <- data.table(read.csv(file))
dt <- data.table(read.csv("R/coursera/3. Getting and Cleansing Data/Lesson 3/getdata-data-ss06hid.csv")
adasd
dt <- data.table(read.csv("R/coursera/3. Getting and Cleansing Data/Lesson 3/getdata-data-ss06hid.csv"))
dt <- data.table(read.csv("R/coursera/3. Getting and Cleansing Data/Lesson 3/getdata-data-ss06hid.csv"))
library(data.table)
install.packages("data.table")
library(data.table)
dt <- data.table(read.csv("R/coursera/3. Getting and Cleansing Data/Lesson 3/getdata-data-ss06hid.csv"))
agricultureLogical <- dt$ACR == 3 & dt$AGS == 6
which(agricultureLogical)
which(agricultureLogical)[1:#]
ccaads
sadasdwq2w
which(agricultureLogical)[1:3]
readJPEG
install.packages(jpeg)
install.packages("jpeg")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
file <- file.path("R/coursera/3. Getting and Cleansing Data/Lesson 3/", "jeff.jpg")
download.file(url, file, mode="wb",method="curl")
library(RCurl)
url2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
x <- getURL(url2)
x <- getURL(url2, ssl.verifypeer = FALSE)
url2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
x <- getURL(url2)
x <- getURL(url2, ssl.verifypeer = FALSE)
out <- read.csv(textConnection(x))
head(out)
head(out[1:6])
url2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
x <- getURL(url2, ssl.verifypeer = FALSE)
img <- readJPEG(x, native = TRUE)
file.info(url2)
?readJPEG
library(jpeg)
?readJPEG
img <- readJPEG(x, native = TRUE)
url2 <- getwd()
url2
url2 <- getwd() + "r"
url2 <- "R/coursera/3. Getting and Cleansing Data/Lesson 3/getdata-jeff.jpg"
x <- getURL(url2)
readJPEG(url2)
readJPEG(url2, native = "FALSE")
readJPEG(url2, native = TRUE)
img <- readJPEG(url2, native = TRUE)
quantile(img, probs = c(0.3,0.8))
urlGDP <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
urlEdu <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(urlGDP,"./R/coursera/3. Getting and Cleansing Data/Lesson 3/GDP.csv",method="curl")
download.file(urlGDP,"./R/coursera/3. Getting and Cleansing Data/Lesson 3/GDP.csv")
download.file(urlEdu,"./R/coursera/3. Getting and Cleansing Data/Lesson 3/EDU.csv")
GDP <- read.csv("./R/coursera/3. Getting and Cleansing Data/Lesson 3/GDP.csv")
EDU <- read.csv("./R/coursera/3. Getting and Cleansing Data/Lesson 3/EDU.csv")
View(EDU)
abc <- merge(GDP, EDU, all=TRUE, by = c("CountryCode"))
?merge
abc <- merge(GDP, EDU, all=TRUE, by.x = c("CountryCode"))
dtGDP <- data.table(read.csv("./R/coursera/3. Getting and Cleansing Data/Lesson 3/GDP.csv", skip = 4, nrows = 215))
View(dtGDP)
?read.csv
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
View(dtGDP)
dtEd <- data.table(read.csv("./R/coursera/3. Getting and Cleansing Data/Lesson 3/EDU.csv"))
dt <- merge(dtGDP, dtEd, all = TRUE, by = c("CountryCode"))
view(dtEd)
View(dtEd)
dt <- merge(dtGDP, dtEd, by = c("CountryCode"))
view(dtGDP)
View(dtGDP)
sessionInfo()
install.packages("installr")
sessionInfo()
installr::updateR()
installr::updateR()
install.packages("installr")
library(installr)
updateR()
updateR()
q()
install.packages("installr")
library(installr)
updateR()
setInternet2(TRUE)
updateR()
q()
dt[, mean(rankingGDP, na.rm = TRUE), by = Income.Group]
dt <- merge(dtGDP, dtEd, all = TRUE, by = c("CountryCode"))
dt <- merge(dtGDP, dtEd, all = TRUE, by = c("CountryCode"))
sum(!is.na(unique(dt$rankingGDP)))
dt[order(rankingGDP, decreasing=TRUE), list(CountryCode,Long.Name.x, rankingGDP)][13]
dt[order(rankingGDP, decreasing=TRUE), list("CountryCode",Long.Name.x, rankingGDP)][13]
dt[order(rankingGDP, decreasing=TRUE), list("CountryCode","Long.Name.x", "rankingGDP")][13]
dt[order(rankingGDP, decreasing=TRUE), list("CountryCode","Long.Name.x", "rankingGDP")][13]
dt[order("rankingGDP", decreasing=TRUE), list("CountryCode","Long.Name.x", "rankingGDP")][13]
dt[order("rankingGDP", decreasing = TRUE)]
dt[order("rankingGDP", decreasing = TRUE),dt$CountryCode]
dt[order("rankingGDP", decreasing = TRUE)][13]
View(dt)
dt[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][13]
dt[, mean(rankingGDP, na.rm = TRUE), by = Income.Group]
breaks <- quantile(dt$rankingGDP, probs = seq(0, 1, 0.2), na.rm = TRUE)
View(breaks)
dt$quantileGDP <- cut(dt$rankingGDP, breaks = breaks)
dt[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
# Create a tidy data set with average for each activity and subject
## Project: Getting and Cleaning Data Course Project, Programming Assignment
## Purpose: To demonstrate your ability to collect, work with, and clean a data set which covers the following:
##          1. Merges the training and the test sets to create one data set.
##          2. Extracts only the measurements on the mean and standard deviation for each measurement.
##          3. Uses descriptive activity names to name the activities in the data set
##          4. Appropriately labels the data set with descriptive variable names.
##          5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
## Data Source: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
## Data Dictionary: http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
## 0. Initialisation ############################################################
# Read training data into temporary data frame
dfTrainFeatures <- read.table("./train/X_train.txt")
dfTrainActivity <- read.table("./train/y_train.txt")
dfTrainSubject <- read.table("./train/subject_train.txt")
# Read test data into temporary data frame
dfTestFeatures <- read.table("./test/X_test.txt")
dfTestActivity <- read.table("./test/y_test.txt")
dfTestSubject <- read.table("./test/subject_test.txt")
# Read Supporting Metadata
dfFeatureNames <- read.table("./features.txt")
dfActivityLabels <- read.table("./activity_labels.txt", header = FALSE)
#End 0 #############################################################################
## 1. Merges the training and the test sets to create one data set #################
# Binds observations from Training and test data sets
dfFeatures <- rbind(dfTrainFeatures, dfTestFeatures)
dfActivity <- rbind(dfTrainActivity, dfTestActivity)
dfSubject <- rbind(dfTrainSubject, dfTestSubject)
# Assign proper namings into data frames
colnames(features) <- t(featureNames[2])
colnames(dfActivity) <- "Activity"
colnames(dfSubject) <- "Subject"
# Merge the feature, activity and subject data sets into a single data set
dfMergedData <- cbind(dfFeatures, dfActivity, dfSubject)
#End 1 ##############################################################################
## 2. Extracts only the measurements on the mean & std dev. for each measurement ####
# Get column names with mean and std dev.
columnsWithMeanSTD <- grep(".*Mean.*|.*Std.*", names(dfMergedData), ignore.case=TRUE)
# Add back the last 2 columns which stores the activity and subject
requiredColumns <- c(columnsWithMeanSTD,562,563)
# Extract only mean & standard deviation measurements
dfExtractedData <- dfMergedData[,requiredColumns]
#End 2 ##############################################################################
## 3. Uses descriptive activity names to name the activities in the data set ########
# Change Activity column to type character from numeric
dfExtractedData$Activity <- as.character(dfExtractedData$Activity)
# Update activity names from dfActivityLabels meta data
for (i in 1:6){
dfExtractedData$Activity[dfExtractedData$Activity == i] <- as.character(dfActivityLabels[i,2])
}
# Factoring the activity column
dfExtractedData$Activity <- as.factor(dfExtractedData$Activity)
#End 3 ##############################################################################
# 4. Appropriately labels the data set with descriptive activity names. #############
names(dfExtractedData)<-gsub("Acc", "Accelerometer", names(dfExtractedData))
names(dfExtractedData)<-gsub("Gyro", "Gyroscope", names(dfExtractedData))
names(dfExtractedData)<-gsub("BodyBody", "Body", names(dfExtractedData))
names(dfExtractedData)<-gsub("Mag", "Magnitude", names(dfExtractedData))
names(dfExtractedData)<-gsub("^t", "Time", names(dfExtractedData))
names(dfExtractedData)<-gsub("^f", "Frequency", names(dfExtractedData))
names(dfExtractedData)<-gsub("tBody", "TimeBody", names(dfExtractedData))
names(dfExtractedData)<-gsub("-mean()", "Mean", names(dfExtractedData), ignore.case = TRUE)
names(dfExtractedData)<-gsub("-std()", "STD", names(dfExtractedData), ignore.case = TRUE)
names(dfExtractedData)<-gsub("-freq()", "Frequency", names(dfExtractedData), ignore.case = TRUE)
names(dfExtractedData)<-gsub("angle", "Angle", names(dfExtractedData))
names(dfExtractedData)<-gsub("gravity", "Gravity", names(dfExtractedData))
#End 4 ##############################################################################
# 5. Creates a 2nd, independent tidy data set with the ##############################
##   average of each variable for each activity and each subject. ###################
# Set Subject column as a factor variable
dfExtractedData$Subject <- as.factor(dfExtractedData$Subject)
dfExtractedData <- data.table(dfExtractedData)
# Need to call library(data.table) in my R environment as it is not pre-loaded ....
# Create a tidy data set with average for each activity and subject
dfTidyData <- aggregate(. ~Subject + Activity, dfExtractedData, mean)
# Order the tidy data set based on subject and activity
dfTidyData <- dfTidyData[order(dfTidyData$Subject,dfTidyData$Activity),]
# Write the updated data set into Tidy Data.txt
write.table(dfTidyData, file = "Tidy Data.txt", row.names = FALSE)
#End 5 ##############################################################################
setwd("~/R/coursera/3. Getting and Cleansing Data/pa1/UCI HAR Dataset")
## Project: Getting and Cleaning Data Course Project, Programming Assignment
## Purpose: To demonstrate your ability to collect, work with, and clean a data set which covers the following:
##          1. Merges the training and the test sets to create one data set.
##          2. Extracts only the measurements on the mean and standard deviation for each measurement.
##          3. Uses descriptive activity names to name the activities in the data set
##          4. Appropriately labels the data set with descriptive variable names.
##          5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
## Data Source: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
## Data Dictionary: http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
## 0. Initialisation ############################################################
# Read training data into temporary data frame
dfTrainFeatures <- read.table("./train/X_train.txt")
dfTrainActivity <- read.table("./train/y_train.txt")
dfTrainSubject <- read.table("./train/subject_train.txt")
# Read test data into temporary data frame
dfTestFeatures <- read.table("./test/X_test.txt")
dfTestActivity <- read.table("./test/y_test.txt")
dfTestSubject <- read.table("./test/subject_test.txt")
# Read Supporting Metadata
dfFeatureNames <- read.table("./features.txt")
dfActivityLabels <- read.table("./activity_labels.txt", header = FALSE)
#End 0 #############################################################################
## 1. Merges the training and the test sets to create one data set #################
# Binds observations from Training and test data sets
dfFeatures <- rbind(dfTrainFeatures, dfTestFeatures)
dfActivity <- rbind(dfTrainActivity, dfTestActivity)
dfSubject <- rbind(dfTrainSubject, dfTestSubject)
# Assign proper namings into data frames
colnames(features) <- t(featureNames[2])
colnames(dfActivity) <- "Activity"
colnames(dfSubject) <- "Subject"
# Merge the feature, activity and subject data sets into a single data set
dfMergedData <- cbind(dfFeatures, dfActivity, dfSubject)
#End 1 ##############################################################################
## 1. Merges the training and the test sets to create one data set #################
# Binds observations from Training and test data sets
dfFeatures <- rbind(dfTrainFeatures, dfTestFeatures)
dfActivity <- rbind(dfTrainActivity, dfTestActivity)
dfSubject <- rbind(dfTrainSubject, dfTestSubject)
# Assign proper namings into data frames
colnames(features) <- t(dfFeatureNames[2])
colnames(dfActivity) <- "Activity"
colnames(dfSubject) <- "Subject"
## 1. Merges the training and the test sets to create one data set #################
# Binds observations from Training and test data sets
dfFeatures <- rbind(dfTrainFeatures, dfTestFeatures)
dfActivity <- rbind(dfTrainActivity, dfTestActivity)
dfSubject <- rbind(dfTrainSubject, dfTestSubject)
# Assign proper namings into data frames
colnames(dfFeatures) <- t(dfFeatureNames[2])
colnames(dfActivity) <- "Activity"
colnames(dfSubject) <- "Subject"
# Merge the feature, activity and subject data sets into a single data set
dfMergedData <- cbind(dfFeatures, dfActivity, dfSubject)
#End 1 ##############################################################################
## 2. Extracts only the measurements on the mean & std dev. for each measurement ####
# Get column names with mean and std dev.
columnsWithMeanSTD <- grep(".*Mean.*|.*Std.*", names(dfMergedData), ignore.case=TRUE)
# Add back the last 2 columns which stores the activity and subject
requiredColumns <- c(columnsWithMeanSTD,562,563)
# Extract only mean & standard deviation measurements
dfExtractedData <- dfMergedData[,requiredColumns]
#End 2 ##############################################################################
## 3. Uses descriptive activity names to name the activities in the data set ########
# Change Activity column to type character from numeric
dfExtractedData$Activity <- as.character(dfExtractedData$Activity)
# Update activity names from dfActivityLabels meta data
for (i in 1:6){
dfExtractedData$Activity[dfExtractedData$Activity == i] <- as.character(dfActivityLabels[i,2])
}
# Factoring the activity column
dfExtractedData$Activity <- as.factor(dfExtractedData$Activity)
#End 3 ##############################################################################
# 4. Appropriately labels the data set with descriptive activity names. #############
names(dfExtractedData)<-gsub("Acc", "Accelerometer", names(dfExtractedData))
names(dfExtractedData)<-gsub("Gyro", "Gyroscope", names(dfExtractedData))
names(dfExtractedData)<-gsub("BodyBody", "Body", names(dfExtractedData))
names(dfExtractedData)<-gsub("Mag", "Magnitude", names(dfExtractedData))
names(dfExtractedData)<-gsub("^t", "Time", names(dfExtractedData))
names(dfExtractedData)<-gsub("^f", "Frequency", names(dfExtractedData))
names(dfExtractedData)<-gsub("tBody", "TimeBody", names(dfExtractedData))
names(dfExtractedData)<-gsub("-mean()", "Mean", names(dfExtractedData), ignore.case = TRUE)
names(dfExtractedData)<-gsub("-std()", "STD", names(dfExtractedData), ignore.case = TRUE)
names(dfExtractedData)<-gsub("-freq()", "Frequency", names(dfExtractedData), ignore.case = TRUE)
names(dfExtractedData)<-gsub("angle", "Angle", names(dfExtractedData))
names(dfExtractedData)<-gsub("gravity", "Gravity", names(dfExtractedData))
#End 4 ##############################################################################
# 5. Creates a 2nd, independent tidy data set with the ##############################
##   average of each variable for each activity and each subject. ###################
# Set Subject column as a factor variable
dfExtractedData$Subject <- as.factor(dfExtractedData$Subject)
dfExtractedData <- data.table(dfExtractedData)
# Need to call library(data.table) in my R environment as it is not pre-loaded ....
# Create a tidy data set with average for each activity and subject
dfTidyData <- aggregate(. ~Subject + Activity, dfExtractedData, mean)
# Order the tidy data set based on subject and activity
dfTidyData <- dfTidyData[order(dfTidyData$Subject,dfTidyData$Activity),]
# Write the updated data set into Tidy Data.txt
write.table(dfTidyData, file = "Tidy Data.txt", row.names = FALSE)
#End 5 ##############################################################################
## Project: Getting and Cleaning Data Course Project, Programming Assignment
## Purpose: To demonstrate your ability to collect, work with, and clean a data set which covers the following:
##          1. Merges the training and the test sets to create one data set.
##          2. Extracts only the measurements on the mean and standard deviation for each measurement.
##          3. Uses descriptive activity names to name the activities in the data set
##          4. Appropriately labels the data set with descriptive variable names.
##          5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
## Data Source: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
## Data Dictionary: http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
## 0. Initialisation ############################################################
# Read training data into temporary data frame
dfTrainFeatures <- read.table("./train/X_train.txt")
dfTrainActivity <- read.table("./train/y_train.txt")
dfTrainSubject <- read.table("./train/subject_train.txt")
# Read test data into temporary data frame
dfTestFeatures <- read.table("./test/X_test.txt")
dfTestActivity <- read.table("./test/y_test.txt")
dfTestSubject <- read.table("./test/subject_test.txt")
# Read Supporting Metadata
dfFeatureNames <- read.table("./features.txt")
dfActivityLabels <- read.table("./activity_labels.txt", header = FALSE)
#End 0 #############################################################################
## 1. Merges the training and the test sets to create one data set #################
# Binds observations from Training and test data sets
dfFeatures <- rbind(dfTrainFeatures, dfTestFeatures)
dfActivity <- rbind(dfTrainActivity, dfTestActivity)
dfSubject <- rbind(dfTrainSubject, dfTestSubject)
# Assign proper namings into data frames
colnames(dfFeatures) <- t(dfFeatureNames[2])
colnames(dfActivity) <- "Activity"
colnames(dfSubject) <- "Subject"
# Merge the feature, activity and subject data sets into a single data set
dfMergedData <- cbind(dfFeatures, dfActivity, dfSubject)
#End 1 ##############################################################################
## 2. Extracts only the measurements on the mean & std dev. for each measurement ####
# Get column names with mean and std dev.
columnsWithMeanSTD <- grep(".*Mean.*|.*Std.*", names(dfMergedData), ignore.case=TRUE)
# Add back the last 2 columns which stores the activity and subject
requiredColumns <- c(columnsWithMeanSTD,562,563)
# Extract only mean & standard deviation measurements
dfExtractedData <- dfMergedData[,requiredColumns]
#End 2 ##############################################################################
## 3. Uses descriptive activity names to name the activities in the data set ########
# Change Activity column to type character from numeric
dfExtractedData$Activity <- as.character(dfExtractedData$Activity)
# Update activity names from dfActivityLabels meta data
for (i in 1:6){
dfExtractedData$Activity[dfExtractedData$Activity == i] <- as.character(dfActivityLabels[i,2])
}
# Factoring the activity column
dfExtractedData$Activity <- as.factor(dfExtractedData$Activity)
#End 3 ##############################################################################
# 4. Appropriately labels the data set with descriptive activity names. #############
names(dfExtractedData)<-gsub("Acc", "Accelerometer", names(dfExtractedData))
names(dfExtractedData)<-gsub("Gyro", "Gyroscope", names(dfExtractedData))
names(dfExtractedData)<-gsub("BodyBody", "Body", names(dfExtractedData))
names(dfExtractedData)<-gsub("Mag", "Magnitude", names(dfExtractedData))
names(dfExtractedData)<-gsub("^t", "Time", names(dfExtractedData))
names(dfExtractedData)<-gsub("^f", "Frequency", names(dfExtractedData))
names(dfExtractedData)<-gsub("tBody", "TimeBody", names(dfExtractedData))
names(dfExtractedData)<-gsub("-mean()", "Mean", names(dfExtractedData), ignore.case = TRUE)
names(dfExtractedData)<-gsub("-std()", "STD", names(dfExtractedData), ignore.case = TRUE)
names(dfExtractedData)<-gsub("-freq()", "Frequency", names(dfExtractedData), ignore.case = TRUE)
names(dfExtractedData)<-gsub("angle", "Angle", names(dfExtractedData))
names(dfExtractedData)<-gsub("gravity", "Gravity", names(dfExtractedData))
#End 4 ##############################################################################
# 5. Creates a 2nd, independent tidy data set with the ##############################
##   average of each variable for each activity and each subject. ###################
# Set Subject column as a factor variable
dfExtractedData$Subject <- as.factor(dfExtractedData$Subject)
dfExtractedData <- data.table(dfExtractedData)
# Need to call library(data.table) in my R environment as it is not pre-loaded ....
library(data.table)
# Create a tidy data set with average for each activity and subject
dfTidyData <- aggregate(. ~Subject + Activity, dfExtractedData, mean)
# Order the tidy data set based on subject and activity
dfTidyData <- dfTidyData[order(dfTidyData$Subject,dfTidyData$Activity),]
# Write the updated data set into Tidy Data.txt
write.table(dfTidyData, file = "Tidy Data.txt", row.names = FALSE)
#End 5 ##############################################################################
library(data.table)
## Project: Getting and Cleaning Data Course Project, Programming Assignment
## Purpose: To demonstrate your ability to collect, work with, and clean a data set which covers the following:
##          1. Merges the training and the test sets to create one data set.
##          2. Extracts only the measurements on the mean and standard deviation for each measurement.
##          3. Uses descriptive activity names to name the activities in the data set
##          4. Appropriately labels the data set with descriptive variable names.
##          5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
## Data Source: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
## Data Dictionary: http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
## 0. Initialisation ############################################################
# Read training data into temporary data frame
dfTrainFeatures <- read.table("./train/X_train.txt")
dfTrainActivity <- read.table("./train/y_train.txt")
dfTrainSubject <- read.table("./train/subject_train.txt")
# Read test data into temporary data frame
dfTestFeatures <- read.table("./test/X_test.txt")
dfTestActivity <- read.table("./test/y_test.txt")
dfTestSubject <- read.table("./test/subject_test.txt")
# Read Supporting Metadata
dfFeatureNames <- read.table("./features.txt")
dfActivityLabels <- read.table("./activity_labels.txt", header = FALSE)
#End 0 #############################################################################
## 1. Merges the training and the test sets to create one data set #################
# Binds observations from Training and test data sets
dfFeatures <- rbind(dfTrainFeatures, dfTestFeatures)
dfActivity <- rbind(dfTrainActivity, dfTestActivity)
dfSubject <- rbind(dfTrainSubject, dfTestSubject)
# Assign proper namings into data frames
colnames(dfFeatures) <- t(dfFeatureNames[2])
colnames(dfActivity) <- "Activity"
colnames(dfSubject) <- "Subject"
# Merge the feature, activity and subject data sets into a single data set
dfMergedData <- cbind(dfFeatures, dfActivity, dfSubject)
#End 1 ##############################################################################
## 2. Extracts only the measurements on the mean & std dev. for each measurement ####
# Get column names with mean and std dev.
columnsWithMeanSTD <- grep(".*Mean.*|.*Std.*", names(dfMergedData), ignore.case=TRUE)
# Add back the last 2 columns which stores the activity and subject
requiredColumns <- c(columnsWithMeanSTD,562,563)
# Extract only mean & standard deviation measurements
dfExtractedData <- dfMergedData[,requiredColumns]
#End 2 ##############################################################################
## 3. Uses descriptive activity names to name the activities in the data set ########
# Change Activity column to type character from numeric
dfExtractedData$Activity <- as.character(dfExtractedData$Activity)
# Update activity names from dfActivityLabels meta data
for (i in 1:6){
dfExtractedData$Activity[dfExtractedData$Activity == i] <- as.character(dfActivityLabels[i,2])
}
# Factoring the activity column
dfExtractedData$Activity <- as.factor(dfExtractedData$Activity)
#End 3 ##############################################################################
# 4. Appropriately labels the data set with descriptive activity names. #############
names(dfExtractedData)<-gsub("Acc", "Accelerometer", names(dfExtractedData))
names(dfExtractedData)<-gsub("Gyro", "Gyroscope", names(dfExtractedData))
names(dfExtractedData)<-gsub("BodyBody", "Body", names(dfExtractedData))
names(dfExtractedData)<-gsub("Mag", "Magnitude", names(dfExtractedData))
names(dfExtractedData)<-gsub("^t", "Time", names(dfExtractedData))
names(dfExtractedData)<-gsub("^f", "Frequency", names(dfExtractedData))
names(dfExtractedData)<-gsub("tBody", "TimeBody", names(dfExtractedData))
names(dfExtractedData)<-gsub("-mean()", "Mean", names(dfExtractedData), ignore.case = TRUE)
names(dfExtractedData)<-gsub("-std()", "STD", names(dfExtractedData), ignore.case = TRUE)
names(dfExtractedData)<-gsub("-freq()", "Frequency", names(dfExtractedData), ignore.case = TRUE)
names(dfExtractedData)<-gsub("angle", "Angle", names(dfExtractedData))
names(dfExtractedData)<-gsub("gravity", "Gravity", names(dfExtractedData))
#End 4 ##############################################################################
# 5. Creates a 2nd, independent tidy data set with the ##############################
##   average of each variable for each activity and each subject. ###################
# Set Subject column as a factor variable
dfExtractedData$Subject <- as.factor(dfExtractedData$Subject)
dfExtractedData <- data.table(dfExtractedData)
# Need to call library(data.table) in my R environment as it is not pre-loaded ....
library(data.table)
# Create a tidy data set with average for each activity and subject
dfTidyData <- aggregate(. ~Subject + Activity, dfExtractedData, mean)
# Order the tidy data set based on subject and activity
dfTidyData <- dfTidyData[order(dfTidyData$Subject,dfTidyData$Activity),]
# Write the updated data set into Tidy Data.txt
write.table(dfTidyData, file = "Tidy Data.txt", row.names = FALSE)
#End 5 ##############################################################################
View(dfTidyData)
x <- read.table(file = "Tidy Data.txt")
view(x)
View(x)
View(dfTidyData)
